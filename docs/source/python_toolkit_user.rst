*****************
Toolkit Functions
*****************

.. currentmodule:: dunetoolkit.python_mongo_toolkit


.. py:function:: search(query)
   :noindex:

   Searches the assays database with the given query and returns the documents that fit the given query

   :param query: The query to use when searching the database. If "query" is a string, it must be in human-readable format, as generated by the Query class's to_string() method. If "query" is a dict, it must be a valid pymongo query.
   :type query: str or dict
   :rtype: list of dict. The documents found that match the given query.


.. py:function:: search_by_id(doc_id)
   :noindex:

   Searches the assays database for the document with the given ID string.

   :param doc_id: The ID string of the document to search for.
   :type doc_id: str
   :rtype: dict. The document that was found with the given ID. Returns None if no document was found with the given ID.

.. py:function:: insert(sample_name, sample_description, data_reference, data_input_name, data_input_contact, data_input_date, grouping="", sample_source="", sample_id="", sample_owner_name="", sample_owner_contact="", measurement_results=[], measurement_practitioner_name="", measurement_practitioner_contact="", measurement_technique="", measurement_institution="", measurement_date=[], measurement_description="", measurement_requestor_name="", measurement_requestor_contact="", data_input_notes="")
   :noindex:

   Intakes all the individual fields that make up an assay document, combines them into a valid pymongo dictionary document, and inserts the document into the assays database.

   :param sample_name: A concise description of the sample.
   :type sample_name: str
   :param sample_description: A detailed description of the sample.
   :type sample_description: str
   :param data_reference: Reference for where the data came from.
   :type data_reference: str
   :param data_input_name: Name of the person/people who performed data input.
   :type data_input_name: str
   :param data_input_contact: Email of the person who performed the data input (must be a valid email address).
   :type data_input_contact: str
   :param data_input_date: A list of strings that can be converted into datetime objects. This represents the date or date range when the data was input.
   :type data_input_date: list of str
   :param grouping: Experiment name.
   :type grouping: str, optional
   :param sample_source: Where the sample came from.
   :type sample_source: str, optional
   :param sample_id: Sample identification number or string.
   :type sample_id: str, optional
   :param sample_owner_name: Name of the person/people who own(s) the sample.
   :type sample_owner_name: str, optional
   :param sample_owner_contact: Email of the person who owns the sample (must be a valid email address).
   :type sample_owner_contact: str, optional
   :param measurement_results: List of measurement dictionaries that MUST contain the following fields: isotope, unit, type, value. The isotope field must be a (str) valid isotope name (e.g. K or Th). The unit must be a (str) valid unit type (e.g. ppm or g). The type must be a (str) representing the type of measurement, which must be one of: "measurement", "range", or "limit". The value must be a (list of str, int, or float) list of values that can be converted into a float, which represent the values of the measurement. For a measurement of type "measurement" there should be two or three values: [central value, symmetric error] or [central value, positive asymmetric error, negative asymmetric error]. For a measurement of type "range" there should be tow or three values: [lower limit, upper limit] or [lower limit, upper limit, confidence level]. For a measurement of type "limit" there should be one to two values: [upper limit] or [upper limit, confidence level].
   :type measurement_results: list of dict, optional
   :param measurement_practitioner_name: Name of the person/people who performed the measurement.
   :type measurement_practitioner_name: str, optional
   :param measurement_practitioner_contact: Email of the person who performed the measurement (must be a valid email address).
   :type measurement_practitioner_contact: str, optional
   :param measurement_technique: Measurement technique.
   :type measurement_technique: str, optional
   :param measurement_institution: Institution name.
   :type measurement_institution: str, optional
   :param measurement_date: A list of strings that can be converted into datetime objects. This represents the date or date range when the measurements happened.
   :type measurement_date: list of str, optional
   :param measurement_description: Detailed measurement description.
   :type measurement_description: str, optional
   :param measurement_requestor_name: Name of the person/people who coordinated the measurement.
   :type measurement_requestor_name: str, optional
   :param measurement_requestor_contact: Email of the person who coordinated the measurement (must be a valid email).
   :type measurement_requestor_contact: str, optional
   :param data_input_notes: Data input notes (simplifications, assumptions).
   :type data_input_notes: str, optional
   :rtype: bson.objectid.ObjectId. The MongoDB ID of the new document that was added into the database. If the insertion was unsuccessful, this value is None.
   :rtype: The error message that arose while trying to update new_doc. This would happen if the document created with all the insert args is in valid or if the insertion of the new document resulted in an error.


.. py:function:: update(doc_id, remove_doc=False, update_pairs={}, new_meas_objects=[], meas_remove_indices=[])
   :noindex:

   Finds the document with the given doc_id in the database, removes it from the database, and updates the document's fields as dictated by the update_pairs, new_meas_objects, and meas_remove_objects parameters. The updated document is then inserted into the database, unless remove_doc is True.

   :param doc_id: The string representation of the MongoDB document ID for the document that the user wishes to update.
   :type doc_id: str
   :param remove_doc: Whether to remove the document from the database entirely. In this case, no update is performed and the document is simply removed from the database.
   :type remove_doc: bool, optional
   :param update_pairs: A dictionary where the keys correspond to the document fields to update and the values are the new values that the fields should be updated with. Any field names except "measurement.results.*" should be specified in this field.
   :type update_pairs: dict, optional
   :param new_meas_objects: A set of measurement results objects that the user wishes to append to the existing list of measurement results objects for the given document. Each object in this list must be a dictionary with the following keys and value types: "type" str (the type of measurement. Must be one of: "measurement", "range", "limit"), "unit" str (the units for the value), "isotope" str (isotope symbol), "value" list of int or float (measurement values).
   :type new_meas_objects: list of dict, optional
   :param meas_remove_indices: The list indices of measurement results objects that the user wishes to remove from the document. The measurement results field is a list of measurement results objects, so order matters and objects are zero-indexed. I.e. if the user wishes to remove the first measurement results object, they would pass [0] for this parameter. If the user wishes to remove the second and third measurement objects (assuming there are at least 3 measurement results objects), they would pass [1, 2] for this parameter.
   :type meas_remove_indices: list of int, optional
   :rtype: bson.objectid.ObjectId. The MongoDB document ID of the new, fully-updated document that was added into the specified collection.
   :rtype: str. The error message that arose while trying to update new_doc. This would happen if any of the updates to the document resulted in errors or if an invalid format/value was found.


general helper functions
========================
.. py:function:: convert_date_to_str(date_obj)
   :noindex:

   Converts a python datetime object into a string of the format: "YYYY-MM-DD."

   :param date_obj: The datetime object that will be converted into a string.
   :type date_obj: datetime.datetime
   :rtype: str. The string that resulted from the datetime object. If the datetime object could not be converted into a string, then this returns an empty string.


.. py:function:: convert_str_to_date(date_str)
   :noindex:

   Converts a string into a python datetime object.

   :param date_str: The string that will be converted into a datetime object. Must be in one of the following formats: "YYYY-MM-DD", "YYYY/MM/DD", "MM-DD-YYYY", "MM/DD/YYYY", "YYYY-DD-MM", "YYYY/DD/MM", "DD-MM-YYYY", "DD/MM/YYY."
   :type date_str: str
   :rtype: datetime.datetime. The datetime object that resulted from the string. If the string could not be converted into a datetime object, then this returns None.


.. py:function:: convert_str_list_to_date(str_list)
   :noindex:

   Converts a list of strings into a list of python datetime objects.

   :param str_list: The list of strings that will be converted into datetime objects. Each string must be in one of the following formats: "YYYY-MM-DD", "YYYY/MM/DD", "MM-DD-YYYY", "MM/DD/YYYY", "YYYY-DD-MM", "YYYY/DD/MM", "DD-MM-YYYY", "DD/MM/YYY."
   :type str_list: list of str
   :rtype: list of datetime.datetime. The list of datetime objects that each resulted from their corresponding strings. If any of the strings cannot be converted into datetime objects, then this function returns None.




